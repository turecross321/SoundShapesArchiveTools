// <auto-generated />
using System;
using DatabaseGenerator.Common.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseGenerator.Common.Migrations
{
    [DbContext(typeof(ArchiveDatabaseContext))]
    [Migration("20240928194900_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveArticle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("ContentUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("IconUrl")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Summary")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ArticleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LevelId")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SecondTimestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT");

                    b.Property<long>("Timestamp")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserName");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveEvent", b =>
                {
                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LevelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventType", "UserName", "CreationDate");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserName");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveLeaderboardEntry", b =>
                {
                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LevelId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TotalMilliseconds")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalNotes")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserName", "LevelId");

                    b.HasIndex("LevelId");

                    b.ToTable("LeaderboardEntries");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ArchiveArticleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ArchiveLevelId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("AverageLives")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Likes")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Plays")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("ResourceGuid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.Property<long?>("VersionTimestamp")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ArchiveArticleId");

                    b.HasIndex("ArchiveLevelId");

                    b.HasIndex("UserName");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveUser", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("IdentityId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("LevelsPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LevelsPublished")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Sources")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Name");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveComment", b =>
                {
                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveArticle", "Article")
                        .WithMany()
                        .HasForeignKey("ArticleId");

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveUser", "User")
                        .WithMany()
                        .HasForeignKey("UserName");

                    b.Navigation("Article");

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveEvent", b =>
                {
                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveLevel", "Level")
                        .WithMany()
                        .HasForeignKey("LevelId");

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveUser", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveLeaderboardEntry", b =>
                {
                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveLevel", "Level")
                        .WithMany("LeaderboardEntries")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveUser", "User")
                        .WithMany()
                        .HasForeignKey("UserName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveLevel", b =>
                {
                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveArticle", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArchiveArticleId");

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveLevel", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArchiveLevelId");

                    b.HasOne("DatabaseGenerator.Common.Database.Types.ArchiveUser", "User")
                        .WithMany()
                        .HasForeignKey("UserName");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveArticle", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DatabaseGenerator.Common.Database.Types.ArchiveLevel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("LeaderboardEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
